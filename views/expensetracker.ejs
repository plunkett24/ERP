<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="stylesheet" href="/css/styles2.css" />
    <link
      rel="stylesheet"
      href="https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css"
    />
    <title>Manage Daily Activities</title>
  </head>
  <body>
    <div class="containerb">
      <p id="error_msg"></p>
      <div class="title">
        <h1 class="title">
          Garfield`s Daily Activity Manager <a href="#"><i class="fa fa-money"></i></a>
        </h1>
      </div>

      <h3>Monthly Activities </h3>   <a href="/users/dashboard">Back</a> 
      <form id="form">
        <div class="form-control">
          <label for="text">Description</label>
          <input
            type="text"
            id="text"
            onfocus="this.value=''"
            placeholder="Enter text..."
          />
        </div>
        <div class="form-control">
          <label for="amount">Amount(+/-) <br /> </label>
          <input
            type="number"
            id="amount"
            onfocus="this.value=''"
            placeholder="Enter value..."
          />
        </div>
        <button class="btn">Add transaction</button>
      </form>
      <br />

      <div class="income-expense">
        <div class="bg-dark">
          <h4>Inflow</h4>
          <p class="income" id="income">$0.00</p>
        </div>
        <div class="bg-dark">
          <h4>Outflow</h4>
          <p class="expense" id="expense">$0.00</p>
        </div>
        <div class="bg-dark">
          <h4>Balance</h4>
          <p id="balance">$0.00</p>
        </div>
      </div>
      <h3>History</h3>
      <!-- Dynamic unordered list to display the various transactions -->
      <ul id="list" class="list"></ul>
      
    </div>
    <script src="main.js"></script>
  </body>
<script>
const balance = document.getElementById("balance");
const inflow = document.getElementById("income");
const outflow = document.getElementById("expense");
const list = document.getElementById("list");
const form = document.getElementById("form");
const text = document.getElementById("text");
const amount = document.getElementById("amount");

// Get transactions from local storage
const localStorageTransactions = JSON.parse(
  localStorage.getItem("transactions")
);

let transactions =
  localStorage.getItem("transactions") !== null ? localStorageTransactions : [];

// Add transaction
function addTransaction(e) {
  e.preventDefault();

  if (text.value.trim() === "" || amount.value.trim() === "") {
    document.getElementById("error_msg").innerHTML =
      "<span >Error: Please enter description and amount!</span>";
    setTimeout(
      () => (document.getElementById("error_msg").innerHTML = ""),
      5000
    );
  } else {
    const transaction = {
      id: generateID(),
      text: text.value,
      amount: +amount.value,
    };

    transactions.push(transaction);

    addTransactionDOM(transaction);

    updateValues();

    updateLocalStorage();

    text.value = "";
    amount.value = "";
  }
}

// Generate random ID
function generateID() {
  return Math.floor(Math.random() * 100000000);
}

// Transactions history
function addTransactionDOM(transaction) {
  // Get sign
  const sign = transaction.amount < 0 ? "-" : "+";

  const item = document.createElement("li");

  // Add class based on value
  item.classList.add(transaction.amount < 0 ? "minus" : "plus");

  item.innerHTML = `
    ${transaction.text} ${sign}${Math.abs(
    transaction.amount
  )} <button class="delete-btn" onclick="removeTransaction(${
    transaction.id
  })">X</button>
  `;

  list.appendChild(item);
}

// Update the balance, inflow and outflow
function updateValues() {
  const amounts = transactions.map((transaction) => transaction.amount);

  const total = amounts.reduce((bal, value) => (bal += value), 0).toFixed(2);

  const income = amounts
    .filter((value) => value > 0)
    .reduce((bal, value) => (bal += value), 0)
    .toFixed(2);

  const expense =
    amounts
      .filter((value) => value < 0)
      .reduce((bal, value) => (bal += value), 0) * -(1).toFixed(2);

  balance.innerText = `$${total}`;
  inflow.innerText = `$${income}`;
  outflow.innerText = `$${expense}`;
}

// Remove transaction by ID
function removeTransaction(id) {
  transactions = transactions.filter((transaction) => transaction.id !== id);

  updateLocalStorage();

  start();
}

// Update local storage transactions
function updateLocalStorage() {
  localStorage.setItem("transactions", JSON.stringify(transactions));
}

// Start app
function start() {
  list.innerHTML = "";
  transactions.forEach(addTransactionDOM);
  updateValues();
}

start();

form.addEventListener("submit", addTransaction);

</script>
  </html>